# coding=utf-8
# Author:        LÃ©o Martire.
# Description:   Plots some raypaths previously generated by GeoAc.
# Notes:         Needs "gradientPlot.py", make sure to have either its
#                path in your PYTHONPATH or set it below.
#
# Usage:
#   
# with:
#   
# yields:
#   

import argparse # mandatory (script argument parsing)
import matplotlib.pyplot as plt # mandatory
import numpy as np # mandatory
import os # nice prints
import sys
sys.path.append("/home/l.martire/Documents/SPECFEM/specfem-dg-master/utils_new/standalone") # locate gradientPlot.py
from matplotlib import rc # plot cosmetics
from load_rays import load_rays # mandatory for loading GeoAc output file
from mpl_toolkits.mplot3d import Axes3D  # for 3d plot
from gradientPlot import colorline

def prepareArgumentParser():
  parser = argparse.ArgumentParser(description='Plots some raypaths.')

  required=parser.add_argument_group('required arguments')
  required.add_argument("-f", "--file", type=str, help="file containing raypaths", required=True)

  parser.add_argument("-d", "--dmin", type=float, default=0., help="d_min for plot")
  parser.add_argument("-D", "--dmax", type=float, default=float('Inf'), help="d_max for plot")
  parser.add_argument("-Z", "--zmax", type=float, default=float('Inf'), help="z_max for plot")
  parser.add_argument("-p", "--projType", type=str, default='2d', help="Projection type.", choices=['2d', '3d'])
  parser.add_argument("-a", "--maxAttenuation", type=float, default=-50., help="Maximum attenuation (dB).")
  return(parser)

# Set plot cosmetics.
font = {'family' : 'normal',
        'weight' : 'normal',
        'size'   : 20}
rc('font', **font)
rc('text', usetex=True)

# Set parser and parse arguments.
parser=prepareArgumentParser()
args = parser.parse_args()

# Set input/output units.
unit_import_intermsofmeters=1000 # outputfile specifies km
unit_plot_intermsofmeters=1; outunit="[m]" # we want to plot in m

# Load rays.
(fulldata, NRAYS, datmaxr, datmaxz) = load_rays(args.file, unit_import_intermsofmeters / unit_plot_intermsofmeters)

# Adjust plot parameters.
maxz = min(args.zmax, datmaxz)
minr = max(args.dmin, 0.)
maxr = min(args.dmax, datmaxr)
plottype = args.projType
maxattenuationdb = args.maxAttenuation

idx=0
idy=1
idz=2
idattgeo=3
idattatm=4
idt=5
idd=np.shape(fulldata[0])[1]

# Actually plot.
fig = plt.figure()
if(plottype=='3d'):
  ax = fig.add_subplot(111, projection='3d')
  ptype = 3
elif(plottype=='2d'):
  ax = fig.add_subplot(111, aspect='equal')
  ptype = 2
else:
  print('error'); exit(-1)

for r in range(0,NRAYS):
  ray=fulldata[r]
  d=np.linalg.norm(ray[:,[idx,idy]],axis=1)
  sel=np.logical_and(d>minr,d<maxr)
  ncolz=np.shape(ray)[1]
  nlines_sel=np.sum(sel)
  selectedray=np.zeros((nlines_sel,ncolz))
  for c in range(0,ncolz):
    selectedray[:,c]=np.extract(sel,ray[:,c])
  seld=np.reshape(np.extract(sel,d),(nlines_sel,1))
  selectedray=np.append(selectedray, seld,axis=1)
  colour = np.extract(sel,ray[:,idt])/520. # colour as function of time
  colour = np.extract(sel,np.sum(ray[:,[idattgeo,idattatm]],axis=1))/maxattenuationdb # color as function of attenuation
  
  if(ptype==3):
    ax.scatter(selectedray[:,idx], selectedray[:,idy], selectedray[:,idz])
  elif(ptype==2):
    colorline(selectedray[:,idd], selectedray[:,idz], colour, cmap=plt.get_cmap('gist_heat'), linewidth=2)
  else:
    print('error'); exit(-1)

plt.axis('scaled')

if(ptype==3):
  ax.set_zlim(0, maxz)
  ax.set_xlabel("$x$ "+outunit)
  ax.set_ylabel("$y$ "+outunit)
  ax.set_zlabel("$z$ "+outunit)
elif(ptype==2):
  ax.set_ylim(0, maxz)
  ax.set_xlabel("$d$ "+outunit)
  ax.set_ylabel("$z$ "+outunit)
else:
  print('error'); exit(-1)

plt.title("Rays (attenuation from 0 to "+str(maxattenuationdb)+" [dB])")
plt.grid(True)
plt.show()
