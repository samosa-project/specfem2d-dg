# coding=utf-8
# Author:        LÃ©o Martire.
# Description:   Plots some arrivals on ground previously generated by GeoAc.
# Notes:         
#
# Usage:
#   
# with:
#   
# yields:
#   

import argparse # mandatory (script argument parsing)
import matplotlib.pyplot as plt # mandatory
import numpy as np # mandatory
import os # nice prints
import sys
#import pandas as pd
sys.path.append("/home/l.martire/Documents/SPECFEM/specfem-dg-master/utils_new/standalone") # locate gradientPlot.py
from matplotlib import rc # plot cosmetics
from load_rays import load_rays # mandatory for loading GeoAc output file
from mpl_toolkits.mplot3d import Axes3D  # for 3d plot
from gradientPlot import colorline

def prepareArgumentParser():
  parser = argparse.ArgumentParser(description='Plots some raypaths.')

  required=parser.add_argument_group('required arguments')
  required.add_argument("-f", "--file", type=str, help="file containing raypaths", required=True)

  parser.add_argument("-r", "--redTimeSpeed", type=float, default=0., help="velocity for reduced time [m/s]")
  parser.add_argument("-D", "--dmax", type=float, default=float('Inf'), help="d_max for plot")
  parser.add_argument("-T", "--tmax", type=float, default=float('Inf'), help="t_max for plot")
  #parser.add_argument("-p", "--projType", type=str, default='2d', help="Projection type.", choices=['2d', '3d'])
  #parser.add_argument("-a", "--maxAttenuation", type=float, default=-50., help="Maximum attenuation (dB).")
  return(parser)

# Set plot cosmetics.
font = {'family' : 'normal',
        'weight' : 'normal',
        'size'   : 20}
rc('font', **font)
rc('text', usetex=True)

# Set parser and parse arguments.
parser=prepareArgumentParser()
args = parser.parse_args()

# Set input/output units.
unit_import_intermsofmeters=1000. # outputfile specifies km
unit_plot_intermsofmeters=1.;
outunit_angles="[deg]"
outunit_distances="[m]" # we want to plot in m
outunit_times="[s]" # we want to plot in s

# Load results.
#kek=pd.read_csv(args.file, sep=' ')
results_array = np.loadtxt(args.file)
#print(results_array)
ID_theta=0
ID_phi=1
ID_nb=2
ID_x=3
ID_y=4
ID_tt=5
ID_turn=6
ID_incl=7
ID_backaz=8
ID_geoatt=9
ID_atmoatt=10
#print(results_array[:,ID_x])
#print(np.shape(results_array)[0])
npts=np.shape(results_array)[0]
print("["+os.path.basename(__file__)+"] Found "+str(npts)+" arrivals.")

results_array[:,[ID_x,ID_y,ID_turn]] *= (unit_import_intermsofmeters/unit_plot_intermsofmeters)
#print(results_array[:,[ID_x,ID_y,ID_turn]])


XYD = np.transpose(np.vstack([results_array[:,ID_x],results_array[:,ID_y],np.zeros(npts)]))
XYD[:,2] = np.linalg.norm(XYD[:,0:2],axis=1)
#print(XYD)

# Choose distance.
D = XYD[:,2]
#print(D)

T = results_array[:, ID_tt]
#print(T)
if(args.redTimeSpeed!=0.):
  T = T - D/args.redTimeSpeed
#print(T)

#ANG = results_array[:,ID_theta] is inclination: 0<=> horizontal, 90<=>fully up, -90<=> fully down
#ANGlab = 'inclination angle '+outunit_angles+' (0 $\Leftrightarrow$ horizontal, counter-clockwise)'

ANG = 90. - results_array[:,ID_theta] # ANG=take-off angle: 0<=>fully up, 90<=> horizontal, 180<=>fully down
ANGlab = 'take-off angle '+outunit_angles+' (0 $\Leftrightarrow$ vertical, clockwise)'

# Adjust plot parameters.
maxT = min(args.tmax, np.max(T))
maxD = min(args.dmax, np.max(D))
#print(maxT)
#print(maxD)

# Actually plot.
# color as function of chosen angle
COL = ANG
COLlab = ANGlab
fig = plt.figure()
ax = fig.add_subplot(111)#, aspect='equal')
scatttt = ax.scatter(T, D, c=COL, cmap='jet')
scattCB = plt.colorbar(scatttt)
scattCB.set_label(COLlab, rotation=270, va='bottom')
#plt.axis('scaled')
#ax.set_xlim(0, maxT)
ax.set_ylim(0, maxD)
if(args.redTimeSpeed!=0.):
  ax.set_xlabel("reduced time $t_r = t - d/"+str(args.redTimeSpeed)+"$ "+outunit_times)
else:
  ax.set_xlabel("time $t$ "+outunit_times)
ax.set_ylabel("$d$ "+outunit_distances)

plt.title("Touchdowns")
plt.grid(True)
plt.show()
