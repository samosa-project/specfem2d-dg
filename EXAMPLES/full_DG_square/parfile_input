#---------------------------------------------------------------------#
#                                                                     #
# Simulation Input Parameters                                         #
#                                                                     #
#---------------------------------------------------------------------#

# Title of job
title                           = full_DG_square
# Type of simulation
# 1: forward
# 2: adjoint
# 3: both simultaneously
# Note: 2 is purposely unused (for compatibility with the numbering of our 3D codes).
SIMULATION_TYPE                 = 1
# Noise
# 0: regular wave propagation simulation
# 1/2/3: noise simulation
NOISE_TOMOGRAPHY                = 0
# Save the last frame (needed for adjoint simulations)
SAVE_FORWARD                    = .false.

# Number of processes (parallel programming)
NPROC                           = 4
# Partitioning
# 1: ascending order (very bad idea)
# 3: SCOTCH
partitioning_method             = 3

# Number of control nodes per element (4 or 9)
ngnod                           = 9

# Time parameters
# Total number of time steps
NSTEP                           = 2000
# Duration of a time step (see section "How to choose the time step" of the manual for how to do this)
DT                              = 4d-4

# Time stepping scheme
# 1: Newmark (2nd order)
# 2: LDDRK4-6 (4th-order 6-stage low storage Runge-Kutta)
# 3: classical RK4 4th-order 4-stage Runge-Kutta
time_stepping_scheme            = 3

# Axisymmetric (2.5D) simulation? If set to false, simulation stays Cartesian planar (2D).
AXISYM                          = .false.

# Set the type of calculation (P-SV or SH/membrane waves).
P_SV                            = .true.

# Set to true to use GPUs
GPU_MODE                        = .false.

# Available models
#   default: define model using nbmodels below
#   ascii: read model from ascii database file
#   binary: read model from binary databse file
#   external: define model using define_external_model subroutine
#   legacy: read model from model_velocity.dat_input
MODEL                           = default

# Output the model with the requested type, does not save if turn to default
SAVE_MODEL                      = default


#---------------------------------------------------------------------#
#                                                                     #
# Attenuation                                                         #
#                                                                     #
#---------------------------------------------------------------------#

# attenuation parameters
ATTENUATION_VISCOELASTIC_SOLID  = .false.        # turn attenuation (viscoelasticity) on or off for non-poroelastic solid parts of the model
ATTENUATION_PORO_FLUID_PART     = .false.        # turn viscous attenuation on or off for the fluid part of poroelastic parts of the model
Q0                              = 1              # quality factor for viscous attenuation
freq0                           = 0.05           # frequency for viscous attenuation

# for viscoelastic attenuation
N_SLS                           = 2              # number of standard linear solids for attenuation (3 is usually the minimum)
f0_attenuation                  = 5.196152422706633 # (Hz) relevant only if source is a Dirac or a Heaviside, otherwise it is f0 the dominant frequency of the source in the DATA/SOURCE file
READ_VELOCITIES_AT_f0           = .false.        # shift velocities to account for physical dispersion (see user manual for more information)

# to undo attenuation for sensitivity kernel calculations or forward runs with SAVE_FORWARD
# use the flag below. It performs undoing of attenuation in an exact way for sensitivity kernel calculations
# but requires disk space for temporary storage, and uses a significant amount of memory used as buffers for temporary storage.
# When that option is on the second parameter indicates how often the code dumps restart files to disk (if in doubt, use something between 100 and 1000).
UNDO_ATTENUATION                = .false.
NT_DUMP_ATTENUATION             = 500

#---------------------------------------------------------------------#
#                                                                     #
# Discontinuous Galerkin                                              #
#                                                                     #
#---------------------------------------------------------------------#
USE_DISCONTINUOUS_METHOD        = .true.
REMOVE_DG_FLUID_TO_SOLID        = .false.
USE_SLOPE_LIMITER               = .false.
MINMOD_FACTOR                   = 0.001d0
CONSTRAIN_HYDROSTATIC           = .true.

# Fluid model
USE_ISOTHERMAL_MODEL            = .false.
SCALE_HEIGHT                    = 10000. # Only used if USE_ISOTHERMAL_MODEL is true.
surface_density                 = 1.4d0 # $\rho_0$. If USE_ISOTHERMAL_MODEL is set to true, corresponds to $\rho_0$ in the formulation. If USE_ISOTHERMAL_MODEL is set to false, $\rho(z)=\rho_0$ for all $z$.
sound_velocity                  = 340.0d0 # $c$. Only used if USE_ISOTHERMAL_MODEL is set to false (if set to true, $c^2$ is determined with SCALE_HEIGHT).
wind                            = 0.0d0
gravity                         = 9.81d0 # Only used if USE_ISOTHERMAL_MODEL is set to true.
dynamic_viscosity               = 0.00000001d0 # $\mu$.
thermal_conductivity            = 0.00d0 # $\kappa$.
tau_epsilon                     = 1.0d0
tau_sigma                       = 1.0d0
constant_p                      = 7/2.0d0
constant_v                      = 5/2.0d0

# Id refering to "velocity and density models" below
id_region_DG                    = 1

# Fluid-solid interface
coord_interface                 = 304.0d0 # Only used if USE_ISOTHERMAL_MODEL is set to true.

# Source
# 1: Density, 2: Moment, 3: Energy.
TYPE_SOURCE_DG                  = 3

# Bottom forcing function
# 0: none
# 1: only time gaussian derivative
# 2: time and space gaussian derivative
TYPE_FORCING                    = 0
main_spatial_period             = 100000
main_time_period                = 40
forcing_initial_loc             = 300000
forcing_initial_time            = 300000

#---------------------------------------------------------------------#
#                                                                     #
# Sources                                                             #
#                                                                     #
#---------------------------------------------------------------------#

# source parameters
NSOURCES                        = 1              # number of sources (source information is then read from the DATA/SOURCE file)
force_normal_to_surface         = .false.        # angleforce normal to surface (external mesh and curve file needed)

# use an existing initial wave field as source or start from zero (medium initially at rest)
initialfield                    = .false.
add_Bielak_conditions_bottom    = .false.        # add Bielak conditions or not if initial plane wave
add_Bielak_conditions_right     = .false.
add_Bielak_conditions_top       = .false.
add_Bielak_conditions_left      = .false.

# acoustic forcing
ACOUSTIC_FORCING                = .false.        # acoustic forcing of an acoustic medium with a rigid interface


#---------------------------------------------------------------------#
#                                                                     #
# Receivers                                                           #
#                                                                     #
#---------------------------------------------------------------------#

# Receiver set parameters for recording stations (i.e. recording points)
# non-DG: 1 records displacement, 2 velocity, 3 acceleration,       4 pressure, 5 curl of displacement, 6 fluid potential
#     DG: 1 records velocity,     2 pressure, 3 sqrt(rho)*velocity, 4 none,     5 none,                 6 none
seismotype                      = 2              
                                                 

# subsampling of the seismograms to create smaller files (but less accurately sampled in time)
subsamp_seismos                 = 1

# so far, this option can only be used if all the receivers are in acoustic elements
USE_TRICK_FOR_BETTER_PRESSURE   = .false.

# Time steps between seismograms saving. The seismograms are automatically saved once at the end of the run anyway.
NSTEP_BETWEEN_OUTPUT_SEISMOS    = 25

# Compute the field int_0^t v^2 dt for a set of GLL points and write it to file. Use
# the script utils/visualisation/plotIntegratedEnergyFile.py to watch. It is refreshed at the same time than the seismograms
COMPUTE_INTEGRATED_ENERGY_FIELD = .false.

# Time shift to use. This input must be a positive value.
# This corresponds to the quantity of time to simulate before the earliest source's spike. The earliest source's spike is always assumed to be at t=0. Hence the simulation will always begin at "negative times".
# If set to zero, the solver will automatically compute a value (originally 1.20 * T0 where T0 is the fundamental period of the earliest source, see "set_source_parameters.f90") and use it. If set to a value lesser than the solver's computed one, an error message will occur and the solver will stop. If set to a value greater than the solver's computed one, the solver will use the user's one.
# If you do not know what you are doing, leave this to zero.
# For time_function_type=3 and USE_TRICK_FOR_BETTER_PRESSURE=.false., a discontinuity at initial time is introduced (since Gaussians have non-compact support). In order for this discontinuity to be of order of magnitude 10^(-r), choose USER_T0=((r*ln(10)+ln(factor))/(pi^2*f^2))^0.5, where factor is the amplification factor, and f is the fundamental frequency.
USER_T0                         = 0.0d0

# Seismogram formats.
save_ASCII_seismograms          = .true.         # ASCII format?
save_binary_seismograms_single  = .true.         # Single precision binary format? (Can be used jointly with ASCII and double precision.)
save_binary_seismograms_double  = .false.        # Double precision binary format? (Can be used jointly with ASCII and double precision.)
SU_FORMAT                       = .false.        # Single precision binary in Seismic Unix format? (adjoint traces will be read in the same format)

# Use an existing STATION file found in "./DATA"? If set to false, a new one from the receiver positions (see below) will be created.
use_existing_STATIONS           = .false.

# Number of receiver sets (i.e. number of receiver lines to create below).
nreceiversets                   = 1

# Orientation.
anglerec                        = 0.0d0           # angle to rotate components at receivers
rec_normal_to_surface           = .false.        # base anglerec normal to surface (external mesh and curve file needed)

# First receiver set: number of receivers, first receiver's x coordinate in meters, first receiver's z coordinate in meters, last receiver's x coordinate in meters (ignored if 1 receiver), and last receiver's z coordinate in meters (ignored if 1 receiver).
nrec                            =   4
xdeb                            =   0.0d0
zdeb                            =  10.0d0
xfin                            =   0.0d0
zfin                            =  40.0d0
record_at_surface_same_vertical = .false. # Receivers inside the medium? If set to false, receivers at the surface.

#---------------------------------------------------------------------#
#                                                                     #
# Adjoint Kernel Outputs                                              #
#                                                                     #
#---------------------------------------------------------------------#

# save sensitivity kernels in ASCII format (much bigger files, but compatible with current GMT scripts) or in binary format
save_ASCII_kernels              = .true.


#---------------------------------------------------------------------#
#                                                                     #
# Boundary Conditions                                                 #
#                                                                     #
#---------------------------------------------------------------------#

# Perfectly matched layer boundary conditions?
PML_BOUNDARY_CONDITIONS         = .false.
NELEM_PML_THICKNESS             = 3
ROTATE_PML_ACTIVATE             = .false.
ROTATE_PML_ANGLE                = 30.0d0

# Stacey absorbing boundary conditions?
STACEY_ABSORBING_CONDITIONS     = .false.

# Periodic boundary conditions?
ADD_PERIODIC_CONDITIONS         = .false.
PERIODIC_HORIZ_DIST             = 4000.0d0


#---------------------------------------------------------------------#
#                                                                     #
# Velocity and Density Models                                         #
#                                                                     #
#---------------------------------------------------------------------#
# Number of models.
nbmodels                        = 1
# Models' description.
# Available material types (see user manual for more information):
#   acoustic:    model_number 1 rho Vp 0  0 0 QKappa Qmu 0 0 0 0 0 0
#   elastic:     model_number 1 rho Vp Vs 0 0 QKappa Qmu 0 0 0 0 0 0
#   anistoropic: model_number 2 rho c11 c13 c15 c33 c35 c55 c12 c23 c25 0 0 0
#   poroelastic: model_number 3 rhos rhof phi c kxx kxz kzz Ks Kf Kfr etaf mufr Qmu
#   tomo:        model_number -1 0 0 A 0 0 0 0 0 0 0 0 0 0
1 1 1.164 349.0d0 0.0d0 0 0 10.0d0 10.0d0 0 0 0 0 0 0

# External tomography file.
TOMOGRAPHY_FILE                 = ./DATA/tomo_file.xyz

# Use an external mesh created by an external meshing tool? If set to false, meshing will be done by the internal tool.
read_external_mesh              = .false.


#---------------------------------------------------------------------#
#                                                                     #
# Parameters for External Meshing                                     #
#                                                                     #
#---------------------------------------------------------------------#

# data concerning mesh, when generated using third-party app (more info in README)
# (see also STACEY_ABSORBING_CONDITIONS above)
mesh_file                       = ./DATA/Mesh_canyon/canyon_mesh_file   # file containing the mesh
nodes_coords_file               = ./DATA/Mesh_canyon/canyon_nodes_coords_file   # file containing the nodes coordinates
materials_file                  = ./DATA/Mesh_canyon/canyon_materials_file   # file containing the material number for each element
free_surface_file               = ./DATA/Mesh_canyon/canyon_free_surface_file   # file containing the free surface
axial_elements_file             = ./DATA/axial_elements_file   # file containing the axial elements if AXISYM is true
absorbing_surface_file          = ./DATA/Mesh_canyon/canyon_absorbing_surface_file   # file containing the absorbing surface
acoustic_forcing_surface_file   = ./DATA/MSH/Surf_acforcing_Bottom_enforcing_mesh   # file containing the acoustic forcing surface
CPML_element_file               = Elements_CPML_list   # file containing the CPML element numbers
tangential_detection_curve_file = ./DATA/courbe_eros_nodes   # file containing the curve delimiting the velocity model

#---------------------------------------------------------------------#
#                                                                     #
# Parameters for Internal Meshing                                     #
#                                                                     #
#---------------------------------------------------------------------#

# File containing interfaces for internal meshing ('../' intended).
interfacesfile                  = ../interfaces_input

#-----------------------------#
# Geometry of the model       #
#-----------------------------#
# Abscissa of the left side of the model, abscissa of the right side of the model, and number of elements along the x-axis.
xmin                            = -50.0d0
xmax                            =  50.0d0
nx                              =  50

# Absorbing boundary parameters (see STACEY_ABSORBING_CONDITIONS above)
absorbbottom                    = .false.
absorbright                     = .false.
absorbtop                       = .false.
absorbleft                      = .false.

#-----------------------------#
# Definition of the different #
# regions of the model in the #
# (nx,nz) spectral-element    #
# mesh.                       #
#-----------------------------#
# Number of regions.
nbregions                       = 1
# Set the different regions and model number for each region. Format:
# regionNumber numberOfXElements startingZElement endingZElement modelNumber (??)
# startingXElement endingXElement startingZElement endingZElement modelNumber (??)
1 50 1 50 1

#---------------------------------------------------------------------#
#                                                                     #
# Display Parameters                                                  #
#                                                                     #
#---------------------------------------------------------------------#

# Time steps between display of information about the simulation (percentage done, estimated remaining time, etc.).
NSTEP_BETWEEN_OUTPUT_INFO       = 200

# Generate a GNUPLOT file containing the grid, and a script to plot it?
output_grid_Gnuplot             = .false.
# Dump the grid in an ASCII text file consisting of a set of X,Y,Z points?
output_grid_ASCII               = .false.        
# Compute and output total acoustic and elastic energy curves (slows down the code significantly)?
output_energy                   = .false.

#---------------------------------------------------------------------#
#                                                                     #
# Movies, Images, and Snaphots Parameters                             #
#                                                                     #
#---------------------------------------------------------------------#

# Time steps between JPEG and/or PostScript snapshots.
NSTEP_BETWEEN_OUTPUT_IMAGES     = 50

# every how many time steps we dump results of the simulation as ASCII or binary files (costly, do not use a very small value)
NSTEP_BETWEEN_OUTPUT_WAVE_DUMPS = 200

# Minimum amplitude kept (in %) for the JPEG and PostScript snapshots: amplitudes below that are muted.
cutsnaps                        = 1.

#-----------------------------#
# JPEG Snapshots              #
#-----------------------------#
output_color_image              = .true.         # Draw JPEG color snapshot?
imagetype_JPEG                  = 4              #    display 1=displ_Ux 2=displ_Uz 3=displ_norm 4=veloc_Vx 5=veloc_Vz 6=veloc_norm 7=accel_Ax 8=accel_Az 9=accel_norm 10=pressure
                                                 # DG display 1=veloc_Ux 2=veloc_Uz 3=veloc_norm 4=pressure 5=Energy 6=Temperature 7=Density 8=sqrt(rho)*veloc_Ux 9=sqrt(rho)*veloc_Uz 10=none
factor_subsample_image          = 1.0d0          # (double precision) factor to subsample color images output by the code (useful for very large models)
USE_CONSTANT_MAX_AMPLITUDE      = .false.        # false: code normalises each snapshot independently to its maximum. true: use CONSTANT_MAX_AMPLITUDE_TO_USE instead
CONSTANT_MAX_AMPLITUDE_TO_USE   = 1.17d4         # Constant normalising maximum amplitude to use for all color images if USE_CONSTANT_MAX_AMPLITUDE is set to true.
POWER_DISPLAY_COLOR             = 0.30d0         # non linear display to enhance small amplitudes in JPEG color images
DRAW_SOURCES_AND_RECEIVERS      = .true.         # Display sources as orange crosses and receivers as green squares?
DRAW_WATER_IN_BLUE              = .true.         # display acoustic layers as constant blue in JPEG images, because they likely correspond to water in the case of ocean acoustics or in the case of offshore oil industry experiments (if off, display them as greyscale, as for elastic or poroelastic elements, for instance for acoustic-only oil industry models of solid media)
USE_SNAPSHOT_NUMBER_IN_FILENAME = .false.        # use snapshot number in the file name of JPEG color snapshots instead of the time step (for instance to create movies in an easier way later)

#-----------------------------#
# PostScript Snapshots        #
#-----------------------------#
output_postscript_snapshot      = .false.        # Draw Postscript snapshot?
imagetype_postscript            = 1              # display 1=displ vector 2=veloc vector 3=accel vector; small arrows are displayed for the vectors
meshvect                        = .true.         # display mesh on PostScript plots or not
modelvect                       = .false.        # display velocity model on PostScript plots or not
boundvect                       = .true.         # display boundary conditions on PostScript plots or not
interpol                        = .true.         # interpolation of the PostScript display on a regular grid inside each spectral element, or use the non-evenly spaced GLL points
pointsdisp                      = 6              # number of points in each direction for interpolation of PostScript snapshots (set to 1 for lower-left corner only)
subsamp_postscript              = 1              # subsampling of background velocity model in PostScript snapshots
sizemax_arrows                  = 1.0d0           # maximum size of arrows on PostScript plots in centimeters
US_LETTER                       = .false.        # use US letter or European A4 paper for PostScript plots

#### for wavefield dumps ####
output_wavefield_dumps          = .false.        # output wave field to a text file every NSTEP_BETWEEN_OUTPUT_TEXT_DUMPS time steps (creates very big files)
imagetype_wavefield_dumps       = 1              # display 1=displ vector 2=veloc vector 3=accel vector 4=pressure
use_binary_for_wavefield_dumps  = .false.        # use ASCII or single-precision binary format for the wave field dumps

